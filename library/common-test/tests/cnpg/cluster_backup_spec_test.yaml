suite: cnpg cluster backup spec test
templates:
  - common.yaml
release:
  name: test-release-name
  namespace: test-release-namespace
tests:
  - it: should generate correct spec with backups (azure)
    set:
      credentials:
        test:
          type: azure
          connectionString: some-connection-string
      cnpg:
        my-pg:
          enabled: true
          user: test-user
          database: test-db
          password: test-password
          backups:
            enabled: true
            target: primary
            retentionPolicy: 10d
            credentials: test
            destinationPath: some-path
    asserts:
      - documentIndex: &secretDoc 1
        isKind:
          of: Secret
      - documentIndex: *secretDoc
        isAPIVersion:
          of: v1
      - documentIndex: *secretDoc
        equal:
          path: metadata.name
          value: test-release-name-common-test-cnpg-my-pg-provider-backup-azure-creds
      - documentIndex: *secretDoc
        equal:
          path: stringData
          value:
            CONNECTION_STRING: some-connection-string
            STORAGE_ACCOUNT: ""
            STORAGE_KEY: ""
            STORAGE_SAS_TOKEN: ""
      - documentIndex: &clusterDoc 0
        isKind:
          of: Cluster
      - documentIndex: *clusterDoc
        isAPIVersion:
          of: postgresql.cnpg.io/v1
      - documentIndex: *clusterDoc
        equal:
          path: metadata.name
          value: test-release-name-common-test-cnpg-my-pg
      - documentIndex: *clusterDoc
        isSubset:
          path: spec
          content:
            backup:
              barmanObjectStore:
                azureCredentials:
                  connectionString:
                    key: CONNECTION_STRING
                    name: test-release-name-common-test-cnpg-my-pg-provider-backup-azure-creds
                  storageAccount:
                    key: STORAGE_ACCOUNT
                    name: test-release-name-common-test-cnpg-my-pg-provider-backup-azure-creds
                  storageKey:
                    key: STORAGE_KEY
                    name: test-release-name-common-test-cnpg-my-pg-provider-backup-azure-creds
                  storageSasToken:
                    key: STORAGE_SAS_TOKEN
                    name: test-release-name-common-test-cnpg-my-pg-provider-backup-azure-creds
                data:
                  compression: gzip
                  encryption: AES256
                  jobs: 2
                destinationPath: some-path
                endpointURL: null
                serverName: test-release-name-common-test-cnpg-my-pg
                wal:
                  compression: gzip
                  encryption: AES256
              retentionPolicy: 10d
              target: primary

  - it: should generate correct spec with backups (google)
    set:
      credentials:
        test:
          type: google
          applicationCredentials: some-credentials
      cnpg:
        my-pg:
          enabled: true
          user: test-user
          database: test-db
          password: test-password
          backups:
            enabled: true
            target: primary
            retentionPolicy: 10d
            credentials: test
            destinationPath: some-path

    asserts:
      - documentIndex: *secretDoc
        isKind:
          of: Secret
      - documentIndex: *secretDoc
        isAPIVersion:
          of: v1
      - documentIndex: *secretDoc
        equal:
          path: metadata.name
          value: test-release-name-common-test-cnpg-my-pg-provider-backup-google-creds
      - documentIndex: *secretDoc
        equal:
          path: stringData
          value:
            APPLICATION_CREDENTIALS: some-credentials
      - documentIndex: &clusterDoc 0
        isKind:
          of: Cluster
      - documentIndex: *clusterDoc
        isAPIVersion:
          of: postgresql.cnpg.io/v1
      - documentIndex: *clusterDoc
        equal:
          path: metadata.name
          value: test-release-name-common-test-cnpg-my-pg
      - documentIndex: *clusterDoc
        isSubset:
          path: spec
          content:
            backup:
              barmanObjectStore:
                data:
                  compression: gzip
                  encryption: AES256
                  jobs: 2
                destinationPath: some-path
                endpointURL: null
                googleCredentials:
                  applicationCredentials:
                    key: APPLICATION_CREDENTIALS
                    name: test-release-name-common-test-cnpg-my-pg-provider-backup-google-creds
                  gkeEnvironment: false
                serverName: test-release-name-common-test-cnpg-my-pg
                wal:
                  compression: gzip
                  encryption: AES256
              retentionPolicy: 10d
              target: primary

  - it: should generate correct spec with backups (s3)
    set:
      credentials:
        test:
          type: s3
          accessKey: some-access-key
          secretKey: some-secret-key
          url: some-url
      cnpg:
        my-pg:
          enabled: true
          user: test-user
          database: test-db
          password: test-password
          backups:
            enabled: true
            target: primary
            retentionPolicy: 10d
            credentials: test
            destinationPath: some-path
    asserts:
      - documentIndex: *secretDoc
        isKind:
          of: Secret
      - documentIndex: *secretDoc
        isAPIVersion:
          of: v1
      - documentIndex: *secretDoc
        equal:
          path: metadata.name
          value: test-release-name-common-test-cnpg-my-pg-provider-backup-s3-creds
      - documentIndex: *secretDoc
        equal:
          path: stringData
          value:
            ACCESS_KEY_ID: some-access-key
            ACCESS_SECRET_KEY: some-secret-key
      - documentIndex: &clusterDoc 0
        isKind:
          of: Cluster
      - documentIndex: *clusterDoc
        isAPIVersion:
          of: postgresql.cnpg.io/v1
      - documentIndex: *clusterDoc
        equal:
          path: metadata.name
          value: test-release-name-common-test-cnpg-my-pg
      - documentIndex: *clusterDoc
        isSubset:
          path: spec
          content:
            backup:
              barmanObjectStore:
                data:
                  compression: gzip
                  encryption: AES256
                  jobs: 2
                destinationPath: some-path
                endpointURL: some-url
                s3Credentials:
                  accessKeyId:
                    key: ACCESS_KEY_ID
                    name: test-release-name-common-test-cnpg-my-pg-provider-backup-s3-creds
                  secretAccessKey:
                    key: ACCESS_SECRET_KEY
                    name: test-release-name-common-test-cnpg-my-pg-provider-backup-s3-creds
                serverName: test-release-name-common-test-cnpg-my-pg
                wal:
                  compression: gzip
                  encryption: AES256
              retentionPolicy: 10d
              target: primary

  - it: should use the revision when set in server name
    set:
      credentials:
        test:
          type: s3
          accessKey: some-access-key
          secretKey: some-secret-key
          url: some-url
      cnpg:
        my-pg:
          enabled: true
          user: test-user
          database: test-db
          password: test-password
          backups:
            enabled: true
            target: primary
            retentionPolicy: 10d
            credentials: test
            destinationPath: some-path
            revision: some-revision
    asserts:
      - documentIndex: *secretDoc
        isKind:
          of: Secret
      - documentIndex: *secretDoc
        isAPIVersion:
          of: v1
      - documentIndex: *secretDoc
        equal:
          path: metadata.name
          value: test-release-name-common-test-cnpg-my-pg-provider-backup-s3-creds
      - documentIndex: *secretDoc
        equal:
          path: stringData
          value:
            ACCESS_KEY_ID: some-access-key
            ACCESS_SECRET_KEY: some-secret-key
      - documentIndex: &clusterDoc 0
        isKind:
          of: Cluster
      - documentIndex: *clusterDoc
        isAPIVersion:
          of: postgresql.cnpg.io/v1
      - documentIndex: *clusterDoc
        equal:
          path: metadata.name
          value: test-release-name-common-test-cnpg-my-pg
      - documentIndex: *clusterDoc
        isSubset:
          path: spec
          content:
            backup:
              barmanObjectStore:
                data:
                  compression: gzip
                  encryption: AES256
                  jobs: 2
                destinationPath: some-path
                endpointURL: some-url
                s3Credentials:
                  accessKeyId:
                    key: ACCESS_KEY_ID
                    name: test-release-name-common-test-cnpg-my-pg-provider-backup-s3-creds
                  secretAccessKey:
                    key: ACCESS_SECRET_KEY
                    name: test-release-name-common-test-cnpg-my-pg-provider-backup-s3-creds
                serverName: test-release-name-common-test-cnpg-my-pg-rsome-revision
                wal:
                  compression: gzip
                  encryption: AES256
              retentionPolicy: 10d
              target: primary

  - it: should override serverName when set
    set:
      credentials:
        test:
          type: s3
          accessKey: some-access-key
          secretKey: some-secret-key
          url: some-url
      cnpg:
        my-pg:
          enabled: true
          user: test-user
          database: test-db
          password: test-password
          backups:
            enabled: true
            target: primary
            retentionPolicy: 10d
            credentials: test
            destinationPath: some-path
            serverName: some-server-name
    asserts:
      - documentIndex: *secretDoc
        isKind:
          of: Secret
      - documentIndex: *secretDoc
        isAPIVersion:
          of: v1
      - documentIndex: *secretDoc
        equal:
          path: metadata.name
          value: test-release-name-common-test-cnpg-my-pg-provider-backup-s3-creds
      - documentIndex: *secretDoc
        equal:
          path: stringData
          value:
            ACCESS_KEY_ID: some-access-key
            ACCESS_SECRET_KEY: some-secret-key
      - documentIndex: &clusterDoc 0
        isKind:
          of: Cluster
      - documentIndex: *clusterDoc
        isAPIVersion:
          of: postgresql.cnpg.io/v1
      - documentIndex: *clusterDoc
        equal:
          path: metadata.name
          value: test-release-name-common-test-cnpg-my-pg
      - documentIndex: *clusterDoc
        isSubset:
          path: spec
          content:
            backup:
              barmanObjectStore:
                data:
                  compression: gzip
                  encryption: AES256
                  jobs: 2
                destinationPath: some-path
                endpointURL: some-url
                s3Credentials:
                  accessKeyId:
                    key: ACCESS_KEY_ID
                    name: test-release-name-common-test-cnpg-my-pg-provider-backup-s3-creds
                  secretAccessKey:
                    key: ACCESS_SECRET_KEY
                    name: test-release-name-common-test-cnpg-my-pg-provider-backup-s3-creds
                serverName: some-server-name
                wal:
                  compression: gzip
                  encryption: AES256
              retentionPolicy: 10d
              target: primary

  - it: should override serverName when set (and also take account revision)
    set:
      credentials:
        test:
          type: s3
          accessKey: some-access-key
          secretKey: some-secret-key
          url: some-url
      cnpg:
        my-pg:
          enabled: true
          user: test-user
          database: test-db
          password: test-password
          backups:
            enabled: true
            target: primary
            retentionPolicy: 10d
            credentials: test
            destinationPath: some-path
            serverName: some-server-name
            revision: "1"

    asserts:
      - documentIndex: *secretDoc
        isKind:
          of: Secret
      - documentIndex: *secretDoc
        isAPIVersion:
          of: v1
      - documentIndex: *secretDoc
        equal:
          path: metadata.name
          value: test-release-name-common-test-cnpg-my-pg-provider-backup-s3-creds
      - documentIndex: *secretDoc
        equal:
          path: stringData
          value:
            ACCESS_KEY_ID: some-access-key
            ACCESS_SECRET_KEY: some-secret-key
      - documentIndex: &clusterDoc 0
        isKind:
          of: Cluster
      - documentIndex: *clusterDoc
        isAPIVersion:
          of: postgresql.cnpg.io/v1
      - documentIndex: *clusterDoc
        equal:
          path: metadata.name
          value: test-release-name-common-test-cnpg-my-pg
      - documentIndex: *clusterDoc
        isSubset:
          path: spec
          content:
            backup:
              barmanObjectStore:
                data:
                  compression: gzip
                  encryption: AES256
                  jobs: 2
                destinationPath: some-path
                endpointURL: some-url
                s3Credentials:
                  accessKeyId:
                    key: ACCESS_KEY_ID
                    name: test-release-name-common-test-cnpg-my-pg-provider-backup-s3-creds
                  secretAccessKey:
                    key: ACCESS_SECRET_KEY
                    name: test-release-name-common-test-cnpg-my-pg-provider-backup-s3-creds
                serverName: some-server-name-r1
                wal:
                  compression: gzip
                  encryption: AES256
              retentionPolicy: 10d
              target: primary

  - it: should generate correct spec with empty target
    set:
      credentials:
        test:
          type: azure
          connectionString: some-connection-string
      cnpg:
        my-pg:
          enabled: true
          user: test-user
          database: test-db
          password: test-password
          backups:
            enabled: true
            retentionPolicy: 10d
            credentials: test
            destinationPath: some-path
    asserts:
      - documentIndex: &clusterDoc 0
        isKind:
          of: Cluster
      - documentIndex: *clusterDoc
        isAPIVersion:
          of: postgresql.cnpg.io/v1
      - documentIndex: *clusterDoc
        equal:
          path: metadata.name
          value: test-release-name-common-test-cnpg-my-pg
      - documentIndex: *clusterDoc
        notExists:
          path: spec.backup.target
